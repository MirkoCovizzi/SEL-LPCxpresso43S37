<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\keil_output\sa_blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\keil_output\sa_blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Apr 02 09:39:21 2019
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SystemInit &rArr; Board_SystemInit &rArr; Board_SetupClocking &rArr; Chip_SetupCoreClock &rArr; Chip_Clock_CalcMainPLLValue &rArr; pll_get_frac &rArr; pll_calc_divs
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[76]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">NMI_Handler</a><BR>
 <LI><a href="#[a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">HardFault_Handler</a><BR>
 <LI><a href="#[b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">MemManage_Handler</a><BR>
 <LI><a href="#[c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">BusFault_Handler</a><BR>
 <LI><a href="#[d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">UsageFault_Handler</a><BR>
 <LI><a href="#[f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SVC_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[11]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PendSV_Handler</a><BR>
 <LI><a href="#[12]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SysTick_Handler</a><BR>
 <LI><a href="#[e]">UnHandled_Vector</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UnHandled_Vector</a><BR>
 <LI><a href="#[23]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC0_IRQHandler</a><BR>
 <LI><a href="#[90]">Chip_Clock_GetMainPLLHz</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">Chip_Clock_GetClockInputHz</a><BR>
 <LI><a href="#[91]">Chip_Clock_GetDivRate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">Chip_Clock_GetClockInputHz</a><BR>
 <LI><a href="#[62]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC0_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[27]">ADC1_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[3e]">ADCHS_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[3f]">ATIMER_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[42]">CAN0_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[3d]">CAN1_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[13]">DAC_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[15]">DMA_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[17]">ETH_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[3c]">EVRT_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[16]">FLASHEEPROM_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[3a]">GINT0_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[3b]">GINT1_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[32]">GPIO0_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[33]">GPIO1_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[34]">GPIO2_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[35]">GPIO3_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[36]">GPIO4_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[37]">GPIO5_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[38]">GPIO6_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[39]">GPIO7_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[24]">I2C0_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[25]">I2C1_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[2e]">I2S0_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[2f]">I2S1_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[19]">LCD_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[48]">LED_blinkProc</a> from dualcore_blinky.o(i.LED_blinkProc) referenced from dualcore_blinky.o(i.BLINKY_Init)
 <LI><a href="#[14]">M0APP_IRQHandler</a> from ipc_msg.o(i.M0APP_IRQHandler) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[22]">MCPWM_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[b]">MemManage_Handler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[43]">QEI_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[1d]">RIT_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[40]">RTC_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[1c]">SCT_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[18]">SDIO_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[31]">SGPIO_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[30]">SPIFI_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[26]">SPI_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[28]">SSP0_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[29]">SSP1_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from sysinit.o(i.SystemInit) referenced from keil_startup_lpc43xx_m4.o(.text)
 <LI><a href="#[1e]">TIMER0_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[1f]">TIMER1_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[20]">TIMER2_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[21]">TIMER3_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[2a]">UART0_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[2b]">UART1_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[2c]">UART2_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[2d]">UART3_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[1a]">USB0_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[1b]">USB1_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[e]">UnHandled_Vector</a> from keil_startup_lpc43xx_m4.o(.text) referenced 8 times from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[41]">WDT_IRQHandler</a> from keil_startup_lpc43xx_m4.o(.text) referenced from keil_startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[4b]">__main</a> from __main.o(!!!main) referenced from keil_startup_lpc43xx_m4.o(.text)
 <LI><a href="#[47]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[46]">fputc</a> from board.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[4a]">ipcex_freeMem</a> from ipc_example.o(i.ipcex_freeMem) referenced from ipc_example.o(i.IPCEX_Init)
 <LI><a href="#[49]">ipcex_updateGblVal</a> from ipc_example.o(i.ipcex_updateGblVal) referenced from ipc_example.o(i.IPCEX_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ad]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ae]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[af]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[50]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[6e]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[52]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[54]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[b0]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[5b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[56]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[b1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[be]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[60]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[c5]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[c7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[c9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[ca]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[cb]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[cc]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[58]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[cd]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; M0Image_Boot &rArr; CheckImages &rArr; print_image_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ce]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[77]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[cf]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[61]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UnHandled_Vector</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnHandled_Vector
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnHandled_Vector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADCHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ATIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EVRT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASHEEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>GINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>GINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GPIO4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>GPIO6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>GPIO7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SGPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, keil_startup_lpc43xx_m4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[63]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcex_freeMem
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
</UL>

<P><STRONG><a name="[d0]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_image_info
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckImages
</UL>

<P><STRONG><a name="[68]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[69]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[67]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[6a]"></a>_printf_longlong_hex</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[53]"></a>_printf_int_hex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[51]"></a>_printf_hex_ptr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[6c]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_pushMsgTout
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_popMsgTout
</UL>

<P><STRONG><a name="[6f]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[d1]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_get_frac
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_initMsgQueue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_get_frac
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[6b]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[71]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[72]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[55]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[66]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[d9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[da]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[59]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5e]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[78]"></a>BLINKY_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dualcore_blinky.o(i.BLINKY_Init))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcex_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>Board_Debug_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, board.o(i.Board_Debug_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Board_Debug_Init &rArr; Chip_UART_SetBaudFDR &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[7e]"></a>Board_Init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, board.o(i.Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Board_Init &rArr; Board_Debug_Init &rArr; Chip_UART_SetBaudFDR &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIROutput
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>Board_LED_Set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, board.o(i.Board_LED_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board_LED_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_blinkProc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;booting_m0_failure
</UL>

<P><STRONG><a name="[81]"></a>Board_SetupClocking</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, board_sysinit.o(i.Board_SetupClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Board_SetupClocking &rArr; Chip_SetupCoreClock &rArr; Chip_Clock_CalcMainPLLValue &rArr; pll_get_frac &rArr; pll_calc_divs
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupCoreClock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetBaseClock
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>

<P><STRONG><a name="[85]"></a>Board_SetupMuxing</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, board_sysinit.o(i.Board_SetupMuxing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Board_SetupMuxing
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>

<P><STRONG><a name="[84]"></a>Board_SystemInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board_sysinit.o(i.Board_SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Board_SystemInit &rArr; Board_SetupClocking &rArr; Chip_SetupCoreClock &rArr; Chip_Clock_CalcMainPLLValue &rArr; pll_get_frac &rArr; pll_calc_divs
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupMuxing
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupClocking
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[87]"></a>Board_UARTPutChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board.o(i.Board_UARTPutChar))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[86]"></a>Board_UARTPutSTR</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, board.o(i.Board_UARTPutSTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Board_UARTPutSTR
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_image_info
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;booting_m0_failure
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckImages
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_initMsgQueue
</UL>

<P><STRONG><a name="[7b]"></a>Board_UART_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.Board_UART_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[8b]"></a>Chip_Clock_CalcMainPLLValue</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, clock_18xx_43xx.o(i.Chip_Clock_CalcMainPLLValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Chip_Clock_CalcMainPLLValue &rArr; pll_get_frac &rArr; pll_calc_divs
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_get_frac
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupCoreClock
</UL>

<P><STRONG><a name="[a3]"></a>Chip_Clock_Enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0Image_Boot
</UL>

<P><STRONG><a name="[95]"></a>Chip_Clock_EnableCrystal</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_EnableCrystal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_EnableCrystal
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupCoreClock
</UL>

<P><STRONG><a name="[98]"></a>Chip_Clock_EnableOpts</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_EnableOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_EnableOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>

<P><STRONG><a name="[8f]"></a>Chip_Clock_GetBaseClock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetBaseClock))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClocktHz
</UL>

<P><STRONG><a name="[8e]"></a>Chip_Clock_GetBaseClocktHz</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetBaseClocktHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClock
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
</UL>

<P><STRONG><a name="[8c]"></a>Chip_Clock_GetClockInputHz</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetClockInputHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainPLLHz
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainPLLHz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClocktHz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_CalcMainPLLValue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>

<P><STRONG><a name="[93]"></a>Chip_Clock_GetDividerDivisor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetDividerDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>

<P><STRONG><a name="[92]"></a>Chip_Clock_GetDividerSource</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetDividerSource))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDivRate
</UL>

<P><STRONG><a name="[90]"></a>Chip_Clock_GetMainPLLHz</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetMainPLLHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>

<P><STRONG><a name="[94]"></a>Chip_Clock_GetRate</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetBaseClocktHz
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
</UL>

<P><STRONG><a name="[83]"></a>Chip_Clock_SetBaseClock</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, clock_18xx_43xx.o(i.Chip_Clock_SetBaseClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_Clock_SetBaseClock
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupCoreClock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupClocking
</UL>

<P><STRONG><a name="[7f]"></a>Chip_GPIO_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio_18xx_43xx.o(i.Chip_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[82]"></a>Chip_SetupCoreClock</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, sysinit_18xx_43xx.o(i.Chip_SetupCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Chip_SetupCoreClock &rArr; Chip_Clock_CalcMainPLLValue &rArr; pll_get_frac &rArr; pll_calc_divs
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnableCrystal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_CalcMainPLLValue
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetBaseClock
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupMainPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupClocking
</UL>

<P><STRONG><a name="[7c]"></a>Chip_UART_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart_18xx_43xx.o(i.Chip_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chip_UART_Init &rArr; Chip_Clock_EnableOpts
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnableOpts
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[7d]"></a>Chip_UART_SetBaudFDR</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, uart_18xx_43xx.o(i.Chip_UART_SetBaudFDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Chip_UART_SetBaudFDR &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[a1]"></a>EVENT_IPC_Receive</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipc_msg.o(i.EVENT_IPC_Receive))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0APP_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>IPCEX_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ipc_example.o(i.IPCEX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IPCEX_Init &rArr; IPC_initMsgQueue &rArr; Board_UARTPutSTR
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_initMsgQueue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcex_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>IPC_initMsgQueue</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ipc_msg.o(i.IPC_initMsgQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IPC_initMsgQueue &rArr; Board_UARTPutSTR
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCEX_Init
</UL>

<P><STRONG><a name="[9d]"></a>IPC_popMsgTout</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ipc_msg.o(i.IPC_popMsgTout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IPC_popMsgTout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcex_tasks
</UL>

<P><STRONG><a name="[9f]"></a>IPC_pushMsgTout</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ipc_msg.o(i.IPC_pushMsgTout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IPC_pushMsgTout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcex_msgPush
</UL>

<P><STRONG><a name="[14]"></a>M0APP_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc_msg.o(i.M0APP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M0APP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_IPC_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>M0Image_Boot</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, m0_img_ldr.o(i.M0Image_Boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = M0Image_Boot &rArr; CheckImages &rArr; print_image_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_Enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckImages
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>MSleep</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.MSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;booting_m0_failure
</UL>

<P><STRONG><a name="[a4]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, chip_18xx_43xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemCoreClockUpdate &rArr; Chip_Clock_GetRate &rArr; Chip_Clock_GetBaseClocktHz &rArr; Chip_Clock_GetClockInputHz &rArr; Chip_Clock_GetMainPLLHz &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetRate
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sysinit.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SystemInit &rArr; Board_SystemInit &rArr; Board_SetupClocking &rArr; Chip_SetupCoreClock &rArr; Chip_Clock_CalcMainPLLValue &rArr; pll_get_frac &rArr; pll_calc_divs
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpuInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc43xx_m4.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[62]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a6]"></a>blinky_tasks</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dualcore_blinky.o(i.blinky_tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blinky_tasks &rArr; ipcex_msgPush &rArr; IPC_pushMsgTout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink_delay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcex_msgPush
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[a5]"></a>fpuInit</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, fpu_init.o(i.fpuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fpuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[46]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, board.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>ipcex_msgPush</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ipc_example.o(i.ipcex_msgPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipcex_msgPush &rArr; IPC_pushMsgTout
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_pushMsgTout
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinky_tasks
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcex_updateGblVal
</UL>

<P><STRONG><a name="[79]"></a>ipcex_register_callback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ipc_example.o(i.ipcex_register_callback))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLINKY_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCEX_Init
</UL>

<P><STRONG><a name="[aa]"></a>ipcex_tasks</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ipc_example.o(i.ipcex_tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipcex_tasks &rArr; IPC_popMsgTout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_popMsgTout
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>main</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = main &rArr; M0Image_Boot &rArr; CheckImages &rArr; print_image_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinky_tasks
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLINKY_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSleep
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0Image_Boot
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcex_tasks
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCEX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[57]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[db]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[dc]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4a]"></a>ipcex_freeMem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipc_example.o(i.ipcex_freeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipcex_freeMem &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc_example.o(i.IPCEX_Init)
</UL>
<P><STRONG><a name="[49]"></a>ipcex_updateGblVal</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ipc_example.o(i.ipcex_updateGblVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipcex_updateGblVal &rArr; ipcex_msgPush &rArr; IPC_pushMsgTout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcex_msgPush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipc_example.o(i.IPCEX_Init)
</UL>
<P><STRONG><a name="[88]"></a>CheckImages</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, m0_img_ldr.o(i.CheckImages))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = CheckImages &rArr; print_image_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_image_info
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;booting_m0_failure
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0Image_Boot
</UL>

<P><STRONG><a name="[8a]"></a>booting_m0_failure</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, m0_img_ldr.o(i.booting_m0_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = booting_m0_failure &rArr; MSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSleep
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LED_Set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckImages
</UL>

<P><STRONG><a name="[89]"></a>print_image_info</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, m0_img_ldr.o(i.print_image_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = print_image_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckImages
</UL>

<P><STRONG><a name="[48]"></a>LED_blinkProc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dualcore_blinky.o(i.LED_blinkProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_blinkProc &rArr; Board_LED_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LED_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dualcore_blinky.o(i.BLINKY_Init)
</UL>
<P><STRONG><a name="[a7]"></a>blink_delay</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, dualcore_blinky.o(i.blink_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blink_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinky_tasks
</UL>

<P><STRONG><a name="[80]"></a>Chip_GPIO_SetPinDIROutput</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board.o(i.Chip_GPIO_SetPinDIROutput))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[ac]"></a>ABS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock_18xx_43xx.o(i.ABS))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_get_frac
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_calc_divs
</UL>

<P><STRONG><a name="[91]"></a>Chip_Clock_GetDivRate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clock_18xx_43xx.o(i.Chip_Clock_GetDivRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = Chip_Clock_GetDivRate &rArr;  Chip_Clock_GetClockInputHz (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDividerSource
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetDividerDivisor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetClockInputHz
</UL>

<P><STRONG><a name="[ab]"></a>pll_calc_divs</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, clock_18xx_43xx.o(i.pll_calc_divs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pll_calc_divs
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABS
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_get_frac
</UL>

<P><STRONG><a name="[8d]"></a>pll_get_frac</STRONG> (Thumb, 184 bytes, Stack size 128 bytes, clock_18xx_43xx.o(i.pll_get_frac))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pll_get_frac &rArr; pll_calc_divs
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_calc_divs
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABS
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_CalcMainPLLValue
</UL>

<P><STRONG><a name="[97]"></a>Chip_UART_GetIndex</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart_18xx_43xx.o(i.Chip_UART_GetIndex))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>

<P><STRONG><a name="[96]"></a>Chip_Clock_SetupMainPLL</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sysinit_18xx_43xx.o(i.Chip_Clock_SetupMainPLL))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupCoreClock
</UL>

<P><STRONG><a name="[47]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
